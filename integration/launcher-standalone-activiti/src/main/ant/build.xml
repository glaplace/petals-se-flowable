<?xml version="1.0" encoding="UTF-8"?>
<project name="PEtALS integration Activiti component tests" default="all" basedir=".">

   <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
   <taskdef resource="org/ow2/petals/ant/petals-ant.properties" />

   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-esb.xml" classpath="${maven_plugin_classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-soapui.xml" classpath="${maven_plugin_classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-registry.xml" classpath="${maven_plugin_classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-esb-component.xml"
                    classpath="${maven_plugin_classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-esb-sa.xml" classpath="${maven_plugin_classpath}" />
   </import>

   <property name="petals.home" value="${project.build.directory}/${project.artifactId}/container" />
   <property name="bc-soap.properties" value="${petals.home}/conf/bc-soap.properties" />
   <property name="topology.container.name" value="sample-0" />

   <!-- Properties -->
   <property name="host1.port" value="7700" />
   <property name="host1.ip" value="localhost" />
   <property name="host1.username" value="petals" />
   <property name="host1.password" value="petals" />
   <property name="activiti-db.file" value="/tmp/activiti.db" />

   <!-- Used by soapui tasks -->
   <property name="soapui.projectFile"
             value="${project.build.directory}/${project.artifactId}/resources/soapui/Vacation-Process-soapui-project.xml" />

   <target name="startDatabaseActiviti">
      <delete file="${activiti-db.file}.mv.db" />
      <!-- Start Database Activiti -->
      <java jar="${com.h2database:h2:jar}" fork="true">
         <arg value="-tcp" />
      </java>
   </target>

   <!-- Target : Prepare -->
   <target name="prepare">
      <!-- Create the properties file for BC SOAP -->
      <echo message="archiveService.url = http://localhost:8088/mockArchiveService${line.separator}"
            file="${bc-soap.properties}" />
      <echo message="notifyService.url = http://localhost:8088/mockNotifyVacationService${line.separator}"
            file="${bc-soap.properties}"
            append="true" />
   </target>

   <!-- Target : Deploy -->
   <target name="deploy">
      <echo message="Installing and starting components..." />

      <parallel>
         <deployComponent url="${org.ow2.petals:petals-se-activiti:jbi-component}"
                          id="petals-se-activiti"
                          jmx.port="${host1.port}"
                          jmx.host="${host1.ip}"
                          jmx.user="${host1.username}"
                          jmx.pwd="${host1.password}">
            <params>
               <param name="jdbcUrl" value="jdbc:h2:tcp://localhost/${activiti-db.file}" />
            </params>
         </deployComponent>
         <deployComponent url="${org.ow2.petals:petals-bc-soap:jbi-component}"
                          id="petals-bc-soap"
                          jmx.port="${host1.port}"
                          jmx.host="${host1.ip}"
                          jmx.user="${host1.username}"
                          jmx.pwd="${host1.password}">
            <params>
               <param name="httpHost" value="localhost" />
               <param name="propertiesFile" value="file://${bc-soap.properties}" />
            </params>
         </deployComponent>
      </parallel>

      <echo message="Hacking database Activiti" />
      <sql driver="org.h2.Driver" url="jdbc:h2:tcp://localhost/${activiti-db.file}" userid="sa" password="">
         <classpath>
            <pathelement location="${com.h2database:h2:jar}" />
         </classpath>
         <transaction>
               ALTER TABLE ACT_GE_BYTEARRAY ALTER COLUMN NAME_ VARCHAR(512);
         </transaction>
      </sql>

      <echo message="Deploying and starting service assemblies..." />
      <deploySa url="${org.ow2.petals.samples:sa-vacation-sample:jbi-service-assembly}"
                id="sa-vacation-sample"
                jmx.port="${host1.port}"
                jmx.host="${host1.ip}"
                jmx.user="${host1.username}"
                jmx.pwd="${host1.password}" />
   </target>


   <!-- Target : Run -->
   <target name="run">
      <echo message="Launching Activiti component tests..." />

      <petals-soapui-test testCase="Nominal TestCase without adjustment" />

      <!-- Wait that the last service invocation from the business process ends -->
      <echo message="Waiting the last service task execution of the business process..." />
      <petals-monit-read-logfiles id="partial-flows" dir="${petals.home}/logs/flow-monitoring" />
      <petals-extract-flow-step-info refid="partial-flows">
         <!-- Retrieve the initial flow that has created the process instance -->
         <flowStepCriteria name="traceCode" value="provideFlowStepBegin" />
         <flowStepCriteria name="flowStepInterfaceName"
                           value="{http://petals.ow2.org/samples/se-bpmn/vacationService}vacation" />
         <flowStepCriteria name="flowStepOperationName"
                           value="{http://petals.ow2.org/samples/se-bpmn/vacationService}new" />
         <flowStepInfo attribute="flowInstanceId" property="initial-flow-instance-id" />
         <flowStepInfo attribute="flowStepId" property="initial-flow-step-id" />
      </petals-extract-flow-step-info>
      <petals-extract-flow-step-info refid="partial-flows">
         <!-- Retrieve the flow associated to the process instance -->
         <flowStepCriteria name="traceCode" value="consumeExtFlowStepBegin" />
         <flowStepCriteria name="correlatedFlowInstanceId" value="${initial-flow-instance-id}" />
         <flowStepCriteria name="correlatedFlowStepId" value="${initial-flow-step-id}" />
         <flowStepCriteria name="processDefinition" value="vacationRequest" />
         <flowStepInfo attribute="flowInstanceId" property="process-instance-flow-instance-id" />
      </petals-extract-flow-step-info>
      <local name="serviceTaskExecutionFailed" />
      <waitfor maxwait="2"
               maxwaitunit="minute"
               checkevery="1"
               checkeveryunit="second"
               timeoutproperty="serviceTaskExecutionFailed">
         <resourcecontains resource="${petals.home}/logs/flow-monitoring/${process-instance-flow-instance-id}/petals.log"
                           substring="flowStepOperationName = '{http://petals.ow2.org/samples/se-bpmn/archiveService}archiveVacationRequest'"
                           casesensitive="true" />
      </waitfor>
      <fail message="Last service task invocation not found (flowInstanceId = ${process-instance-flow-instance-id})">
         <condition>
            <isset property="serviceTaskExecutionFailed" />
         </condition>
      </fail>

      <!--
         Assertions about MONIT traces
         Caution: new MONIT traces can have occured since the last use of 'petals-monit-read-logfiles' because of ansynchronous service
                  tasks. So it is needed to reload all MONIT traces in a new object.
      -->
      <echo message="Checking MONIT trace of this first process instance" />
      <petals-monit-read-logfiles id="flows" dir="${petals.home}/logs/flow-monitoring" />
      <petals-extract-flow-step-info refid="flows" row="0">
         <!-- Retrieve the flow step that has launched the vacation request validation -->
         <flowStepCriteria name="traceCode" value="provideFlowStepBegin" />
         <flowStepCriteria name="flowStepInterfaceName"
                           value="{http://petals.ow2.org/samples/se-bpmn/vacationService}vacation" />
         <flowStepCriteria name="flowStepOperationName"
                           value="{http://petals.ow2.org/samples/se-bpmn/vacationService}validate" />
         <flowStepInfo attribute="flowInstanceId" property="validation-flow-instance-id" />
         <flowStepInfo attribute="flowStepId" property="validation-flow-step-id" />
      </petals-extract-flow-step-info>
      <petals-assert-flow-instance refid="flows" flowInstanceId="${process-instance-flow-instance-id}">
         <!-- Check flow step of the process instance execution -->
         <assertFlowStep flowStepIdx="0">
            <!-- The process instance starts -->
            <attributeEquals name="traceCode" value="consumeExtFlowStepBegin" />
            <attributeEquals name="correlatedFlowInstanceId" value="${initial-flow-instance-id}" />
            <attributeEquals name="correlatedFlowStepId" value="${initial-flow-step-id}" />
            <attributeEquals name="processDefinition" value="vacationRequest" />
            <attributeSet name="processInstanceId" />
            <flowStepInfo attribute="flowStepId" property="flowStep.0.id" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="1">
            <!-- Service task invokes a Petals service ... -->
            <attributeEquals name="traceCode" value="provideFlowStepBegin" />
            <attributeEquals name="flowStepInterfaceName"
                             value="{http://petals.ow2.org/samples/se-bpmn/notifyVacationService}notifyVacation" />
            <attributeEquals name="flowStepServiceName"
                             value="{http://petals.ow2.org/samples/se-bpmn/notifyVacationService}notifyVacationService" />
            <attributeEquals name="flowStepOperationName"
                             value="{http://petals.ow2.org/samples/se-bpmn/notifyVacationService}newVacationRequest" />
            <attributeSet name="flowStepEndpointName" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.0.id}" />
            <flowStepInfo attribute="flowStepId" property="flowStep.1.id" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="2">
            <!-- ... as external web-service -->
            <attributeEquals name="traceCode" value="provideExtFlowStepBegin" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.1.id}" />
            <attributeEquals name="requestedURL" value="http://localhost:8088/mockNotifyVacationService" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="3">
            <!-- The vacation request validation user task  -->
            <attributeEquals name="traceCode" value="provideFlowStepBegin" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.0.id}" />
            <attributeEquals name="taskDefinition" value="handleVacationRequest" />
            <attributeEquals onEnd="true" name="correlatedFlowInstanceId" value="${validation-flow-instance-id}" />
            <attributeEquals onEnd="true" name="correlatedFlowStepId" value="${validation-flow-step-id}" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="4">
            <!-- Service task invokes a Petals service ... -->
            <attributeEquals name="traceCode" value="provideFlowStepBegin" />
            <attributeEquals name="flowStepInterfaceName"
                             value="{http://petals.ow2.org/samples/se-bpmn/notifyVacationService}notifyVacation" />
            <attributeEquals name="flowStepServiceName"
                             value="{http://petals.ow2.org/samples/se-bpmn/notifyVacationService}notifyVacationService" />
            <attributeEquals name="flowStepOperationName"
                             value="{http://petals.ow2.org/samples/se-bpmn/notifyVacationService}vacationRequestApproved" />
            <attributeSet name="flowStepEndpointName" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.0.id}" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="6">
            <!-- Service task invokes a Petals service ... -->
            <attributeEquals name="traceCode" value="provideFlowStepBegin" />
            <attributeEquals name="flowStepInterfaceName"
                             value="{http://petals.ow2.org/samples/se-bpmn/archiveService}archive" />
            <attributeEquals name="flowStepServiceName"
                             value="{http://petals.ow2.org/samples/se-bpmn/archiveService}archiveService" />
            <attributeEquals name="flowStepOperationName"
                             value="{http://petals.ow2.org/samples/se-bpmn/archiveService}archiveVacationRequest" />
            <attributeSet name="flowStepEndpointName" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.0.id}" />
         </assertFlowStep>
      </petals-assert-flow-instance>

      <petals-soapui-test testCase="Nominal TestCase with adjustment" />
      <petals-soapui-test testCase="Faulty TestCase - Unexpected validator" />
      <petals-soapui-test testCase="Faulty TestCase - Unexpected vacation request id" />
   </target>


   <!-- Target : Clean all -->
   <target name="cleanAll">
      <echo message="Cleaning Activiti component tests..." />

      <cleanContainerArtifacts jmx.host="${host1.ip}"
                               jmx.port="${host1.port}"
                               jmx.user="${host1.username}"
                               jmx.pwd="${host1.password}" />

   </target>

   <!-- Target : Start Web services -->
   <target name="startWebservices">
      <startMocks />
   </target>

   <!-- Target : Wait Web services -->
   <target name="waitWebservices">
      <parallel failonany="yes">
         <waitMock url="http://localhost:8088/mockNotifyVacationService" />
         <waitMock url="http://localhost:8088/mockArchiveService" />
      </parallel>
   </target>

   <!-- Target : Stop Web services -->
   <target name="stopWebservices">
      <parallel failonany="yes">
         <stopMock url="http://localhost:8088/mockNotifyVacationService" />
         <stopMock url="http://localhost:8088/mockArchiveService" />
      </parallel>
   </target>

   <target name="launchContainer">
      <replaceregexp file="${petals.home}/conf/loggers.properties"
                     match="org.ow2.petals.log.handler.PetalsFileHandler.level.*"
                     replace="org.ow2.petals.log.handler.PetalsFileHandler.level=FINEST"
                     byline="true" />
      <replaceregexp file="${petals.home}/conf/loggers.properties"
                     match="Petals.Container.Components.level.*"
                     replace="Petals.Container.Components.level=FINEST"
                     byline="true" />

      <startContainer name="${topology.container.name}" home="${petals.home}" jmx.port="${host1.port}" />
   </target>

   <!-- Target : All -->
   <target name="all.env-not-killed-after">
      <antcall target="killAllContainers" />
      <antcall target="launchContainer" />

      <antcall target="cleanAll" />

      <trycatch>
         <try>
            <parallel failonany="yes">
               <daemons>
                  <antcall target="startDatabaseActiviti" />
               </daemons>
               <antcall target="startWebservices" />
               <sequential>
                  <trycatch>
                     <try>
                        <sequential>
                           <antcall target="prepare" />
                           <antcall target="deploy" />
                           <antcall target="waitWebservices" />
                           <antcall target="run" />
                        </sequential>
                     </try>
                     <finally>
                        <antcall target="stopWebservices" />
                     </finally>
                  </trycatch>
               </sequential>
            </parallel>
         </try>
         <finally>
            <!-- We force component uninstallation to avoid stack trace logged by SE Activiti when tests fail. The async job
                 executor of SE Activiti try run SQL query on a database that is not running -->
            <antcall target="cleanAll" />
         </finally>
      </trycatch>
      <stopContainer name="${topology.container.name}" home="${petals.home}" />

   </target>

   <target name="all">
      <trycatch>
         <try>
            <antcall target="all.env-not-killed-after" />
         </try>
         <finally>
            <antcall target="killAllContainers" />
            <antcall target="killAllRegistryMembers" />
         </finally>
      </trycatch>
   </target>
</project>
